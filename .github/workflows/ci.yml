name: CI
on:
  pull_request:
    branches: [master]

env:
  CI_RUST_TOOLCHAIN: 1.67.1
  CONTROLLER_SOCKET_FILE: /tmp/controller.sock
  BIND_MOUNTER: target/debug/bind_mounter
  ETCD_CONTAINER_NAME: etcd
  ETCD_IMAGE: gcr.io/etcd-development/etcd:v3.4.13
  NODE_SOCKET_FILE: /tmp/node.sock
  RUST_BACKTRACE: full
  RUST_LOG: debug
  DATENLORD_LOCAL_BIND_DIR: /tmp/datenlord_data_dir

jobs:
  outdated:
    name: Outdated
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-outdated
          version: latest
      - run: cargo outdated

  audit:
    name: Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    #- uses: actions-rs/audit-check@v1.2.0
    #  with:
    #    token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions-rs/install@v0.1
      with:
        crate: cargo-audit
        version: latest
    # Temporarily ignore the time/chrono segfault since there are no known
    # good wordarounds and they are used by dependent libraries also.
    - run: cargo audit --ignore RUSTSEC-2020-0071 --ignore RUSTSEC-2023-0052

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Install CSI dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake g++ libprotobuf-dev protobuf-compiler
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/cargo@v1
        with:
          command: check

  csi-sanity-test:
    name: CSI-Sanity-Test
    runs-on: ubuntu-latest
    steps:
      - name: Install CSI dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake g++ libprotobuf-dev protobuf-compiler
      - name: Set up Docker
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Check out code
        uses: actions/checkout@v2
      - name: Prepare Rust environment
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
      - name: Enable bind_mounter permission
        run: |
          sudo chown root:root $BIND_MOUNTER
          sudo chmod u+s $BIND_MOUNTER
          ls -lsh $BIND_MOUNTER
          export ETCD_END_POINT=127.0.0.1:2379
          export BIND_MOUNTER=`realpath $BIND_MOUNTER`
      - name: Run etcd service
        run: |
          ./scripts/setup_etcd.sh
      - name: Check out csi-sanity code
        uses: actions/checkout@v2
        with:
          repository: kubernetes-csi/csi-test
          path: ./csi-test
      - name: Build csi-sanity code
        env:
          PROJECT_PATH: "./csi-test/cmd/csi-sanity"
        run: |
          cd $PROJECT_PATH
          go build
      - name: Run csi plugin and csi-sanity test
        run: |
          export ETCD_END_POINT=127.0.0.1:2379
          sudo sed -i 's/#user_allow_other/user_allow_other/g' /etc/fuse.conf
          mkdir $DATENLORD_LOCAL_BIND_DIR
          target/debug/datenlord start_node --endpoint=unix://$NODE_SOCKET_FILE --workerport=0 --nodeid=localhost --nodeip=127.0.0.1 --drivername=io.datenlord.csi.plugin --mountpoint=$DATENLORD_LOCAL_BIND_DIR --etcd=$ETCD_END_POINT --volume_info="fuse-test-bucket;http://127.0.0.1:9000;test;test1234" --capacity=1073741824 --serverport=8800 --volume_type=none &
          target/debug/datenlord start_csi_controller --endpoint=unix://$CONTROLLER_SOCKET_FILE --workerport=0 --nodeid=localhost --nodeip=127.0.0.1 --drivername=io.datenlord.csi.plugin --mountpoint=$DATENLORD_LOCAL_BIND_DIR --etcd=$ETCD_END_POINT &
          ./csi-test/cmd/csi-sanity/csi-sanity -csi.endpoint=$NODE_SOCKET_FILE -csi.controllerendpoint=$CONTROLLER_SOCKET_FILE --ginkgo.flake-attempts 3
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3

  fmt:
    name: Fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Install CSI dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake g++ libprotobuf-dev protobuf-compiler
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - uses: Swatinem/rust-cache@v2
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --all-targets -- -D warnings

  fstest:
    name: fstest
    runs-on: ubuntu-latest
    steps:
      - name: Install CSI dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake g++ libprotobuf-dev protobuf-compiler
      - name: Set up Docker
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Check out code
        uses: actions/checkout@v2
      - name: Prepare Rust environment
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
      - name: Enable bind_mounter permission
        run: |
          sudo chown root:root $BIND_MOUNTER
          sudo chmod u+s $BIND_MOUNTER
          ls -lsh $BIND_MOUNTER
          export ETCD_END_POINT=127.0.0.1:2379
          export BIND_MOUNTER=`realpath $BIND_MOUNTER`
      - name: Run etcd service
        run: |
          ./scripts/setup_etcd.sh
      - name: Modify fuse.conf
        run: sudo sed -i 's/#user_allow_other/user_allow_other/g' /etc/fuse.conf
      - name: Run Datenlord in the background locally.
        run: |
          ./scripts/start_local_node.sh &
      - name: Build fstest
        run: |
          cd /home/runner/work/datenlord/datenlord/tests/fstest_dir/
          make
      - name: Run fstest
        run: |
          cd $DATENLORD_LOCAL_BIND_DIR
          sudo prove -rv /home/runner/work/datenlord/datenlord/tests/fstest_dir/tests/