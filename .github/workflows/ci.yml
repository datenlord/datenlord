name: CI
on:
  pull_request:
    branches: [master]

env:
  CI_RUST_TOOLCHAIN: 1.47.0

jobs:
  outdated:
    name: Outdated
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-outdated
          version: latest
      - run: cargo outdated

  audit:
    name: Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        crate: cargo-audit
        use-tool-cache: true
    - uses: actions-rs/audit-check@v1.2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      #- uses: actions-rs/cargo@v1
      #  with:
      #    command: test
      - name: Run cargo test with non-root and root
        run: |
          cargo test |& tee cargo_test.log
          TEST_CMD=`grep Running cargo_test.log | awk '{print $2}'`
          sudo $TEST_CMD

  fmt:
    name: Fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - run: rustup component add rustfmt 
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all -- -D warnings

  e2e:
    name: E2E
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - name: Build DatenLord
        uses: actions-rs/cargo@v1
        with:
          command: build
      #- name: Check out xfstest code
      #  uses: actions/checkout@v2
      #  with:
      #    repository: kdave/xfstests
      #    path: ./xfstests
      #- name: Build xfstests
      #  run: |
      #    cd xfstests
      #    make
      #    cd -
      - name: Check out fuse-xfstests code
        uses: actions/checkout@v2
        with:
          repository: pwang7/fuse-xfstests
          path: ./fuse-xfstests
      - name: Run fuse-xfstests
        run: |
          sudo apt update
          sudo apt install xfslibs-dev uuid-dev libtool-bin \
              e2fsprogs automake gcc libuuid1 quota attr libattr1-dev make \
              libacl1-dev libaio-dev xfsprogs libgdbm-dev gawk fio dbench \
              uuid-runtime python sqlite3 # liburing-dev
          sudo useradd -m fsgqa
          sudo groupadd fsgqa || true
          sudo useradd 123456-fsgqa
          sudo useradd fsgqa2
          cd fuse-xfstests
          make
          #sudo ./check-datenlord
          cd -
      #- name: Check out pjdfstest code
      #  uses: actions/checkout@v2
      #  with:
      #    repository: pjd/pjdfstest
      #    path: ./pjdfstest
      - name: Run ntfs-3g-pjd-fstest
        run: |
          git clone https://git.code.sf.net/p/ntfs-3g/pjd-fstest ntfs-3g-pjd-fstest
          cd ntfs-3g-pjd-fstest
          cp tests/conf tests/conf.bak
          cat >tests/conf <<END
            # fstest configuration file
            # Known operating systems: FreeBSD, SunOS, Linux
            os=`uname`
            # Known file systems: UFS, ZFS, ext3, ext4, ntfs-3g, xfs, btrfs, glusterfs
            fs="ext4"
          END
          cat tests/conf
          gcc -Wall -DHAS_TRUNCATE64 -DHAS_STAT64 fstest.c -o fstest
          cd -
          mkdir fuse_mount_dir
          sudo RUST_LOG=debug target/debug/async_fuse -m ./fuse_mount_dir &>datenlord.log &
          cd fuse_mount_dir
          sudo prove -rv ../ntfs-3g-pjd-fstest/tests/chflags
          sudo prove -rv ../ntfs-3g-pjd-fstest/tests/xacl
      #- name: Setup tmate session
      #  if: ${{ always() }}
      #  uses: mxschmitt/action-tmate@v3

#  coverage:
#    name: Coverage
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Install toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
#          override: true
#
#      - name: Run cargo-tarpaulin
#        uses: actions-rs/tarpaulin@v0.1
#        with:
#          version: '0.9.0'
#          args: '-- --test-threads 1'
#
#      - name: Upload to codecov.io
#        uses: codecov/codecov-action@v1.0.2
#        with:
#          token: ${{secrets.CODECOV_TOKEN}}
#
#      - name: Archive code coverage results
#        uses: actions/upload-artifact@v1
#        with:
#          name: code-coverage-report
#          path: cobertura.xml
