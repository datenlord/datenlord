name: CI
on:
  pull_request:
    branches: [master]

env:
  CI_RUST_TOOLCHAIN: 1.61.0
  CONTROLLER_SOCKET_FILE: /tmp/controller.sock
  BIND_MOUNTER: target/debug/bind_mounter
  ETCD_CONTAINER_NAME: etcd
  NODE_SOCKET_FILE: /tmp/node.sock
  RUST_BACKTRACE: full
  RUST_LOG: debug

jobs:
  outdated:
    name: Outdated
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-outdated
          version: latest
      - run: cargo outdated

  audit:
    name: Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    #- uses: actions-rs/audit-check@v1.2.0
    #  with:
    #    token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions-rs/install@v0.1
      with:
        crate: cargo-audit
        version: latest
    # Temporarily ignore the time/chrono segfault since there are no known
    # good wordarounds and they are used by dependent libraries also.
    - run: cargo audit --ignore RUSTSEC-2020-0159 --ignore RUSTSEC-2020-0071

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Install CSI dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake g++ libprotobuf-dev protobuf-compiler
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  datenlord-cargo-test:
    name: DatenLord-Cargo-Test
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: sudo apt install -y cmake g++ libprotobuf-dev protobuf-compiler
      - name: Install benchmark tool fio
        run: | 
          sudo apt update
          sudo apt install -y fio
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - name: Build bind_mounter
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --bin bind_mounter
      - name: Enable bind_mounter permission and run cargo test with not-root and root
        run: |
          sudo chown root:root $BIND_MOUNTER
          sudo chmod u+s $BIND_MOUNTER
          ls -lsh $BIND_MOUNTER
          export ETCD_END_POINT=127.0.0.1:2379
          export BIND_MOUNTER=`realpath $BIND_MOUNTER`
          cargo test |& tee datenlord_cargo_test.log
          export TEST_CMD=`grep Running datenlord_cargo_test.log | grep datenlord | awk -F"[()]" '{print $2}'`
          sudo $TEST_CMD

  csi-sanity-test:
    name: CSI-Sanity-Test
    runs-on: ubuntu-latest
    #services:
    #  etcd:
    #    image: gcr.io/etcd-development/etcd:latest
    #    # Set health checks to wait until etcd has started
    #    options: >-
    #      --health-cmd "/usr/local/bin/etcdctl cluster-health"
    #      --health-interval 10s
    #      --health-timeout 5s
    #      --health-retries 5
    #      --entrypoint /usr/local/bin/etcd
    #    ports:
    #      - 2379:2379
    #      - 2380:2380
    steps:
      - name: Install CSI dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake g++ libprotobuf-dev protobuf-compiler
      - name: Set up Docker
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Check out code
        uses: actions/checkout@v2
      - name: Prepare Rust environment
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
      #- name: Cargo test
      #  uses: actions-rs/cargo@v1
      #  with:
      #    command: test
      #- name: Cargo build
      #  uses: actions-rs/cargo@v1
      #  with:
      #    command: build
      #- name: Enable bind_mounter permission again
      #  run: |
      #    sudo chown root:root $BIND_MOUNTER
      #    sudo chmod u+s $BIND_MOUNTER
      #    ls -lsh $BIND_MOUNTER
      - name: Enable bind_mounter permission
        run: |
          sudo chown root:root $BIND_MOUNTER
          sudo chmod u+s $BIND_MOUNTER
          ls -lsh $BIND_MOUNTER
          export ETCD_END_POINT=127.0.0.1:2379
          export BIND_MOUNTER=`realpath $BIND_MOUNTER`
      - name: Run etcd service
        run: |
          docker run -d --rm --net host --name $ETCD_CONTAINER_NAME gcr.io/etcd-development/etcd:latest
          docker ps
          docker logs $ETCD_CONTAINER_NAME
          # sudo netstat -lntp
      - name: Check out csi-sanity code
        uses: actions/checkout@v2
        with:
          repository: kubernetes-csi/csi-test
          path: ./csi-test
      - name: Build csi-sanity code
        uses: cedrickring/golang-action@1.7.0
        env:
          PROJECT_PATH: "./csi-test/cmd/csi-sanity"
      - name: Run csi plugin and csi-sanity test
        run: |
          export ETCD_END_POINT=127.0.0.1:2379
          target/debug/datenlord start_node --endpoint=unix://$NODE_SOCKET_FILE --workerport=0 --nodeid=localhost --nodeip=127.0.0.1 --drivername=io.datenlord.csi.plugin --mountpoint=/tmp/datenlord_data_dir --etcd=$ETCD_END_POINT --volume_info="fuse-test-bucket;http://127.0.0.1:9000;test;test1234" --capacity=1073741824 --serverport=8800 --volume_type=none &
          target/debug/datenlord start_csi_controller --endpoint=unix://$CONTROLLER_SOCKET_FILE --workerport=0 --nodeid=localhost --nodeip=127.0.0.1 --drivername=io.datenlord.csi.plugin --mountpoint=/tmp/datenlord_data_dir --etcd=$ETCD_END_POINT &
          ./csi-test/cmd/csi-sanity/csi-sanity -csi.endpoint=$NODE_SOCKET_FILE -csi.controllerendpoint=$CONTROLLER_SOCKET_FILE
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3

  fmt:
    name: Fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Install CSI dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake g++ libprotobuf-dev protobuf-compiler
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --all-targets -- -D warnings

  fs-e2e:
    name: FS-E2E
    runs-on: ubuntu-latest
    steps:
      - name: Install CSI dependencies
        run: | 
          sudo apt update
          sudo apt install -y cmake g++ libprotobuf-dev protobuf-compiler
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
          override: true
      - name: Build DatenLord
        uses: actions-rs/cargo@v1
        with:
          command: build
      #- name: Check out xfstest code
      #  uses: actions/checkout@v2
      #  with:
      #    repository: kdave/xfstests
      #    path: ./xfstests
      #- name: Build xfstests
      #  run: |
      #    cd xfstests
      #    make
      #    cd -
      - name: Check out fuse-xfstests code
        uses: actions/checkout@v2
        with:
          repository: pwang7/fuse-xfstests
          path: ./fuse-xfstests
      #- name: Run fuse-xfstests
      #  run: |
      #    sudo apt update
      #    sudo apt install xfslibs-dev uuid-dev libtool-bin \
      #        e2fsprogs automake gcc libuuid1 quota attr libattr1-dev make \
      #        libacl1-dev libaio-dev xfsprogs libgdbm-dev gawk fio dbench \
      #        uuid-runtime python sqlite3 # liburing-dev
      #    sudo useradd -m fsgqa
      #    sudo groupadd fsgqa || true
      #    sudo useradd 123456-fsgqa
      #    sudo useradd fsgqa2
      #    cd fuse-xfstests
      #    make
      #    #sudo ./check-datenlord
      #    cd -
      - name: Run etcd service
        run: |
          docker run -d --rm --net host --name $ETCD_CONTAINER_NAME gcr.io/etcd-development/etcd:latest
          docker ps
          docker logs $ETCD_CONTAINER_NAME
      - name: Run ntfs-3g-pjd-fstest
        run: |
          git clone https://git.code.sf.net/p/ntfs-3g/pjd-fstest ntfs-3g-pjd-fstest
          cd ntfs-3g-pjd-fstest
          cp tests/conf tests/conf.bak
          cat >tests/conf <<END
            # fstest configuration file
            # Known operating systems: FreeBSD, SunOS, Linux
            os=`uname`
            # Known file systems: UFS, ZFS, ext3, ext4, ntfs-3g, xfs, btrfs, glusterfs
            fs="ext4"
          END
          cat tests/conf
          gcc -Wall -DHAS_TRUNCATE64 -DHAS_STAT64 fstest.c -o fstest
          cd -
          mkdir fuse_mount_dir
          sudo RUST_LOG=debug target/debug/datenlord start_async_fuse --mountpoint=./fuse_mount_dir --volume_info="fuse-test-bucket;http://127.0.0.1:9000;test;test1234" --volume_type=none --etcd=127.0.0.1:2379 --serverport=8800 --nodeid=test --nodeip=127.0.0.1 --capacity=1073741824 &>datenlord.log &
          cd fuse_mount_dir
          sudo prove -rv ../ntfs-3g-pjd-fstest/tests/chflags
          sudo prove -rv ../ntfs-3g-pjd-fstest/tests/xacl
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3

#  coverage:
#    name: Coverage
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Install toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: default
#          toolchain: ${{ env.CI_RUST_TOOLCHAIN }}
#          override: true
#
#      - name: Run cargo-tarpaulin
#        uses: actions-rs/tarpaulin@v0.1
#        with:
#          version: '0.9.0'
#          args: '-- --test-threads 1'
#
#      - name: Upload to codecov.io
#        uses: codecov/codecov-action@v1.0.2
#        with:
#          token: ${{secrets.CODECOV_TOKEN}}
#
#      - name: Archive code coverage results
#        uses: actions/upload-artifact@v1
#        with:
#          name: code-coverage-report
#          path: cobertura.xml
