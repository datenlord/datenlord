name: CRON-CI
on:
  pull_request:
    branches: [master]
  schedule: [cron: "0 */4 * * *"]
  workflow_dispatch: 
env:
  RUST_VERSION: 1.67.1
  BUSYBOX_IMAGE: busybox:1.35.0
  CONFIG_DOCKERHUB: datenlord-deploy.yaml
  CONFIG_MINIKUBE: scripts/datenlord_minikube.yaml
  CONFIG_KIND: scripts/datenlord.yaml
  CONTROLLER_APP_LABEL: csi-controller-datenlord
  CONTROLLER_CONTAINER_NAME: datenlord-controller-plugin
  CSI_ATTACHER_IMAGE: quay.io/k8scsi/csi-attacher:v2.2.0
  CSI_DRIVER_IMAGE: quay.io/k8scsi/csi-node-driver-registrar:v1.3.0
  CSI_PROVISIONER_IMAGE: quay.io/k8scsi/csi-provisioner:v1.6.0
  CSI_RESIZER_IMAGE: quay.io/k8scsi/csi-resizer:v0.5.0
  CSI_SNAPSHOTTER_IMAGE: quay.io/k8scsi/csi-snapshotter:v2.1.1
  DATENLORD_CSI_IMAGE: datenlord/csiplugin:e2e_test
  DATENLORD_IMAGE: datenlord/datenlord:e2e_test
  DATENLORD_LOGGING: scripts/datenlord-logging.yaml
  DATENLORD_LOGGING_NAMESPACE: datenlord-logging
  DATENLORD_METRICS_TEST: scripts/datenlord-metrics-test.yaml
  DATENLORD_MONITORING: scripts/datenlord-monitor.yaml
  DATENLORD_MONITORING_NAMESPACE: datenlord-monitoring
  DATENLORD_NAMESPACE: csi-datenlord
  E2E_TEST_CONFIG: scripts/datenlord-e2e-test.yaml
  ELASTICSEARCH_LABEL: elasticsearch
  ETCD_IMAGE: gcr.io/etcd-development/etcd:v3.4.13
  FUSE_CONTAINER_NAME: datenlord-async
  FUSE_MOUNT_PATH: /var/opt/datenlord-data
  GRAFANA_LABEL: grafana
  GRAFANA_PORT: 3000
  K8S_CONFIG: k8s.e2e.config
  K8S_VERSION: v1.21.1
  KIBANA_LABEL: kibana
  KIND_NODE_VERSION: kindest/node:v1.21.1@sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6
  KIND_VERSION: v0.11.1
  # MINIKUBE_VERSION: v1.13.0
  NODE_APP_LABEL: csi-nodeplugin-datenlord
  NODE_CONTAINER_NAME: datenlord
  PROMETHEUS_LABEL: prometheus-server
  SCHEDULER_IMAGE: k8s.gcr.io/kube-scheduler:v1.19.1
  SNAPSHOTTER_VERSION: v5.0.0

jobs:
  #minikube-csi-e2e:
  #  name: K8S-CSI-E2E
  #  # How to run K8S CSI e2e test
  #  # https://www.stackovercloud.com/2020/01/08/blog-testing-of-csi-drivers/
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Set SSH config
  #      run: |
  #        sudo rm -rf ~/.ssh/
  #        ssh-keygen -N '' -f ~/.ssh/id_rsa
  #        cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
  #        cat ~/.ssh/authorized_keys
  #        export HOSTNAME=`hostname`
  #        export WHO=`whoami`
  #        export HOSTIP=`ifconfig eth0 | grep 'inet ' | awk '{print $2}'`
  #        cat >>~/.ssh/config <<END
  #        Host thisrunner
  #          HostName $HOSTNAME
  #          User $WHO
  #          IdentityFile $HOME/.ssh/id_rsa
  #          StrictHostKeyChecking no
  #          UserKnownHostsFile /dev/null
  #        END
  #        chmod 755 $HOME
  #        sudo service ssh restart
  #        sudo service ssh status
  #        ssh -vvv thisrunner
  #        exit
  #    - name: Setup Minikube
  #      uses: manusa/actions-setup-minikube@v2.0.0
  #      with:
  #        #minikube version: 'v1.13.0'
  #        #kubernetes version: 'v1.19.0'
  #        minikube version: ${{ env.MINIKUBE_VERSION }}
  #        kubernetes version: ${{ env.K8S_VERSION }}
  #        github token: ${{ secrets.GITHUB_TOKEN }}
  #    #- name: Deploy minikube
  #    #  uses: opsgang/ga-setup-minikube@v0.1.1
  #    #  with:
  #    #    minikube-version: 1.12.3
  #    #    k8s-version: 1.18.8
  #    #- name: Test deploy DatenLord CSI plugin to K8S
  #    #  run: |
  #    #    kubectl cluster-info
  #    #    kubectl get pods -A
  #    #    docker pull quay.io/k8scsi/csi-node-driver-registrar:v1.3.0
  #    #    docker pull quay.io/k8scsi/livenessprobe:v2.0.0
  #    #    docker pull quay.io/k8scsi/csi-attacher:v2.2.0
  #    #    docker pull quay.io/k8scsi/csi-provisioner:v1.6.0
  #    #    docker pull quay.io/k8scsi/csi-snapshotter:v2.1.1
  #    #    docker pull quay.io/k8scsi/csi-resizer:v0.5.0
  #    #    docker pull gcr.io/etcd-development/etcd:latest
  #    #    docker pull datenlord/csiplugin:latest
  #    #    kubectl apply -f csiplugin_k8s.yaml
  #    #    kubectl get csidriver
  #    #    while [[ $(kubectl get pods -l app=csi-controller-datenlord -A -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do kubectl get pods -A -o wide ; kubectl get nodes -o wide ; kubectl describe pod csi-controller-datenlord-0 -n csi-datenlord ; sleep 6 ; done
  #    #    while [[ $(kubectl get pods -l app=csi-nodeplugin-datenlord -A -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do kubectl get pods -A -o wide ; kubectl get nodes -o wide ; sleep 6 ; done
  #    #    kubectl get pods -A -o wide
  #    #    sudo netstat -lntp && ls -lsh
  #    - name: Check out code
  #      uses: actions/checkout@v2
  #    - name: Docker build fuse and csi
  #      run: |
  #        docker build . --build-arg RUST_IMAGE_VERSION=$RUST_VERSION --file ./Dockerfile --target fuse --tag $DATENLORD_IMAGE
  #        docker build . --build-arg RUST_IMAGE_VERSION=$RUST_VERSION --file ./Dockerfile --target csi --tag $DATENLORD_CSI_IMAGE
  #    - name: Deploy DatenLord to K8S
  #      run: |
  #        kubectl cluster-info
  #        kubectl get pods -A
  #        kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshots.yaml
  #        kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshotcontents.yaml
  #        kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshotclasses.yaml
  #        kubectl apply -f $CONFIG_MINIKUBE
  #        kubectl wait --for=condition=Ready pod -l app=$CONTROLLER_APP_LABEL -n $DATENLORD_NAMESPACE --timeout=60s
  #        kubectl wait --for=condition=Ready pod -l app=$NODE_APP_LABEL -n $DATENLORD_NAMESPACE --timeout=60s
  #        FOUND_PATH=`cat /proc/self/mountinfo | grep fuse | grep $FUSE_MOUNT_PATH | awk '{print $5}'`
  #        test -n $FOUND_PATH || (echo "FAILED TO FIND MOUNT PATH $FUSE_MOUNT_PATH" && /bin/false)
  #        kubectl delete -f $CONFIG_MINIKUBE
  #        NO_PATH=`cat /proc/self/mountinfo | grep fuse | grep $FUSE_MOUNT_PATH | awk '{print $5}'`
  #        test -z $NO_PATH || (echo "FAILED TO UN-MOUNT PATH $FUSE_MOUNT_PATH" && /bin/false)
  #        kubectl apply -f $CONFIG_MINIKUBE
  #        kubectl get csidriver
  #        kubectl get csinode
  #        kubectl get storageclass
  #        kubectl get volumesnapshotclass
  #        kubectl wait --for=condition=Ready pod -l app=$CONTROLLER_APP_LABEL -n $DATENLORD_NAMESPACE --timeout=60s
  #        kubectl wait --for=condition=Ready pod -l app=$NODE_APP_LABEL -n $DATENLORD_NAMESPACE --timeout=60s
  #        wget https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/deploy/kubernetes/snapshot-controller/rbac-snapshot-controller.yaml
  #        wget https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/deploy/kubernetes/snapshot-controller/setup-snapshot-controller.yaml
  #        sed -e 's/namespace\:\ default/namespace\:\ kube\-system/g' rbac-snapshot-controller.yaml > datenlord-rbac-snapshot-controller.yaml
  #        sed -e 's/namespace\:\ default/namespace\:\ kube\-system/g' setup-snapshot-controller.yaml > datenlord-setup-snapshot-controller.yaml
  #        kubectl apply -f datenlord-rbac-snapshot-controller.yaml
  #        kubectl apply -f datenlord-setup-snapshot-controller.yaml
  #        kubectl wait --for=condition=Ready pod -l app=snapshot-controller -n kube-system --timeout=60s
  #        kubectl get pods -A -o wide
  #        sudo netstat -lntp && ls -lsh
  #    - name: CSI E2E Test
  #      run: |
  #        wget --quiet https://dl.k8s.io/$K8S_VERSION/kubernetes-test-linux-amd64.tar.gz
  #        tar zxvf kubernetes-test-linux-amd64.tar.gz
  #        kubectl config view --raw > $K8S_CONFIG
  #        #kubernetes/test/bin/e2e.test -v=5 -ginkgo.failFast -ginkgo.failOnPending -ginkgo.debug -ginkgo.v -ginkgo.focus='External.Storage' -kubectl-path=`which kubectl` -kubeconfig=$K8S_CONFIG -storage.testdriver=`realpath $E2E_TEST_CONFIG`
  #        kubernetes/test/bin/ginkgo -p -v -failFast -failOnPending -debug -focus='External.Storage' kubernetes/test/bin/e2e.test -- -v=5 -kubectl-path=`which kubectl` -kubeconfig=`realpath $K8S_CONFIG` -storage.testdriver=`realpath $E2E_TEST_CONFIG` -test.parallel=3
  #    - name: Print DatenLord logs
  #      if: ${{ failure() }}
  #      run: |
  #        CONTROLLER_POD_NAME=`kubectl get pod -l app=$CONTROLLER_APP_LABEL -n $DATENLORD_NAMESPACE -o jsonpath="{.items[0].metadata.name}"`
  #        echo "SHOW LOGS OF $CONTROLLER_CONTAINER_NAME IN $CONTROLLER_POD_NAME"
  #        kubectl logs $CONTROLLER_POD_NAME -n $DATENLORD_NAMESPACE -c $CONTROLLER_CONTAINER_NAME
  #        NODE_POD_NAME=`kubectl get pod -l app=$NODE_APP_LABEL -n $DATENLORD_NAMESPACE -o jsonpath="{.items[0].metadata.name}"`
  #        echo "SHOW LOGS OF $NODE_CONTAINER_NAME IN $NODE_POD_NAME"
  #        kubectl logs $NODE_POD_NAME -n $DATENLORD_NAMESPACE -c $NODE_CONTAINER_NAME
  #        echo "SHOW LOGS OF $FUSE_CONTAINER_NAME IN $NODE_POD_NAME"
  #        kubectl logs $NODE_POD_NAME -n $DATENLORD_NAMESPACE -c $FUSE_CONTAINER_NAME
  #    - name: Setup tmate session
  #      if: ${{ failure() }}
  #      uses: mxschmitt/action-tmate@v3

  kind-csi-e2e:
    name: KIND-K8S-CSI-E2E
    # How to run K8S CSI e2e test
    # https://www.stackovercloud.com/2020/01/08/blog-testing-of-csi-drivers/
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -f /home/runner/runners/2.305.0.tgz
          sudo rm -f /home/runner/runners/2.306.0.tgz
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/lib/google-cloud-sdk/
          sudo rm -rf /usr/lib/firefox
          sudo rm -rf /usr/share/swift
          sudo rm -rf /opt/microsoft/msedge
        # uses: jlumbroso/free-disk-space@main
        # with:
        #   # this might remove tools that are actually needed,
        #   # when set to "true" but frees about 6 GB
        #   tool-cache: true
      - name: Check out code
        uses: actions/checkout@v2
      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/$KIND_VERSION/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin
      - name: Create Kind Cluster
        run: |
          cat >> ./kind-config.yaml <<END
          # Kind cluster with 1 control plane node and 3 workers
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          # the control plane node config
          - role: control-plane
          # the three workers
          - role: worker
            image: $KIND_NODE_VERSION
          - role: worker
            image: $KIND_NODE_VERSION
          - role: worker
            image: $KIND_NODE_VERSION
          END
          kind create cluster --config ./kind-config.yaml
      - name: Setup SSH
        run: |
          cat > /tmp/sources.list <<'END'
          # ubuntu20
          deb http://mirrors.aliyun.com/ubuntu/ focal main restricted
          deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted
          deb http://mirrors.aliyun.com/ubuntu/ focal universe
          deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe
          deb http://mirrors.aliyun.com/ubuntu/ focal multiverse
          deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse
          deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted
          deb http://mirrors.aliyun.com/ubuntu/ focal-security universe
          deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse
          END
          
          cat >>/tmp/setup.sh <<'END'
          NODES_IP="$(kubectl get nodes -A -o wide | awk 'FNR > 2 {print $6}')"
          NODES="$(kubectl get nodes -A -o wide | awk 'FNR > 2 {print $1}')"
          for node in ${NODES}; do
            USER="$(whoami)"
            #docker cp /etc/apt/sources.list ${node}:/etc/apt/sources.list
            docker cp /tmp/sources.list ${node}:/etc/apt/sources.list
            docker exec ${node} apt-get update
            docker exec ${node} apt-get install -y ssh sudo
            docker exec ${node} systemctl start sshd
            docker exec ${node} useradd -m ${USER}
            docker exec ${node} usermod -aG sudo ${USER}
            echo "${USER} ALL=(ALL) NOPASSWD:ALL" > /tmp/${USER}
            docker cp /tmp/${USER} ${node}:/etc/sudoers.d/${USER}
            docker exec ${node} chown root:root /etc/sudoers.d/${USER}

            docker exec ${node} mkdir /home/${USER}/.ssh
            docker exec ${node} ls -al /home/${USER}/
            docker cp ${HOME}/.ssh/id_rsa.pub ${node}:/home/${USER}/.ssh/authorized_keys
            docker exec ${node} chown ${USER}:${USER} /home/${USER}/ -R
          done
          for ip in ${NODES_IP}; do
              ssh-keyscan -H $ip >> ${HOME}/.ssh/known_hosts
          done
          END

          rm -rf $HOME/.ssh/
          ssh-keygen -N '' -f ~/.ssh/id_rsa
          /bin/bash /tmp/setup.sh
      - name: Datenlord Monitoring and Alerting Test
        run: |
          sh scripts/datenlord_monitor_test.sh
      - name: Docker build fuse and csi
        run: |
          docker build . --build-arg RUST_IMAGE_VERSION=$RUST_VERSION --file ./Dockerfile --target datenlord --tag $DATENLORD_IMAGE
      - name: Deploy DatenLord to K8S
        run: |
          for image in $ETCD_IMAGE $BUSYBOX_IMAGE $SCHEDULER_IMAGE $CSI_ATTACHER_IMAGE $CSI_DRIVER_IMAGE $CSI_PROVISIONER_IMAGE $CSI_RESIZER_IMAGE $CSI_SNAPSHOTTER_IMAGE; do
            echo "loading $image"
            docker pull $image
            kind load docker-image $image
          done
          kind load docker-image $DATENLORD_IMAGE
          kubectl cluster-info
          kubectl get pods -A
          kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/$SNAPSHOTTER_VERSION/client/config/crd/snapshot.storage.k8s.io_volumesnapshots.yaml
          kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/$SNAPSHOTTER_VERSION/client/config/crd/snapshot.storage.k8s.io_volumesnapshotcontents.yaml
          kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/$SNAPSHOTTER_VERSION/client/config/crd/snapshot.storage.k8s.io_volumesnapshotclasses.yaml
          kubectl apply -f $CONFIG_KIND
          kubectl wait --for=condition=Ready pod -l app=$CONTROLLER_APP_LABEL -n $DATENLORD_NAMESPACE --timeout=60s
          kubectl wait --for=condition=Ready pod -l app=$NODE_APP_LABEL -n $DATENLORD_NAMESPACE --timeout=60s
          kubectl get csidriver
          kubectl get csinode
          kubectl get storageclass
          kubectl get volumesnapshotclass
          wget https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/$SNAPSHOTTER_VERSION/deploy/kubernetes/snapshot-controller/rbac-snapshot-controller.yaml
          wget https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/$SNAPSHOTTER_VERSION/deploy/kubernetes/snapshot-controller/setup-snapshot-controller.yaml
          sed -e 's/namespace\:\ default/namespace\:\ kube\-system/g' rbac-snapshot-controller.yaml > datenlord-rbac-snapshot-controller.yaml
          sed -e 's/namespace\:\ default/namespace\:\ kube\-system/g' setup-snapshot-controller.yaml > datenlord-setup-snapshot-controller.yaml
          docker pull gcr.io/k8s-staging-sig-storage/snapshot-controller:${SNAPSHOTTER_VERSION}
          kind load docker-image gcr.io/k8s-staging-sig-storage/snapshot-controller:${SNAPSHOTTER_VERSION}
          kubectl apply -f datenlord-rbac-snapshot-controller.yaml
          kubectl apply -f datenlord-setup-snapshot-controller.yaml
          for i in $(seq 1 30); do
            if kubectl get deployment snapshot-controller -n kube-system; then
                break
            fi 
            sleep 1
          done
          kubectl wait --for=condition=Ready pod -l app=snapshot-controller -n kube-system --timeout=60s
          kubectl get pods -A -o wide
          # Sleep 60 to wait cluster become stable
          sleep 60
          kubectl get pods -A -o wide
          # sudo netstat -lntp && ls -lsh
      - name: Datenlord metric and logging test
        run: |
          sh scripts/datenlord_metrics_logging_test.sh
      - name: CSI E2E Test
        run: |
          # clean up nodes temporarily
          cat > /tmp/clean_up_mount_dir.sh <<'END'
          #!/bin/bash

          CONFIG_KIND=$1
          NODE_APP_LABEL=$2
          DATENLORD_NAMESPACE=$3
          IF_REDEPLOY=$4

          kubectl delete -f $CONFIG_KIND
          NODES_IP="$(kubectl get nodes -A -o wide | awk 'FNR > 2 {print $6}')"
          USER="$(whoami)"
          for ip in ${NODES_IP}; do
            ssh -t ${USER}@${ip} 'sudo bash -s' < scripts/umount-in-container.sh /var/opt/datenlord-data
            echo "done umount in node $ip"
          done

          if [ "$IF_REDEPLOY" = true ]; then
            kubectl apply -f $CONFIG_KIND
            kubectl wait --for=condition=Ready pod -l app=$NODE_APP_LABEL -n $DATENLORD_NAMESPACE --timeout=120s
            sleep 10
            kubectl get pods -A -o wide
          fi
          END
          
          wget --quiet https://dl.k8s.io/$K8S_VERSION/kubernetes-test-linux-amd64.tar.gz
          tar zxvf kubernetes-test-linux-amd64.tar.gz
          kubectl config view --raw > $K8S_CONFIG
          #kubernetes/test/bin/e2e.test -v=5 -ginkgo.failFast -ginkgo.failOnPending -ginkgo.debug -ginkgo.v -ginkgo.focus='External.Storage' -kubectl-path=`which kubectl` -kubeconfig=$K8S_CONFIG -storage.testdriver=`realpath $E2E_TEST_CONFIG`
          kubernetes/test/bin/ginkgo -v -failFast -failOnPending -debug -focus='External.Storage' -skip='\[Feature:|\[Disruptive\]|\[Serial\]' kubernetes/test/bin/e2e.test -- -v=5 -kubectl-path=`which kubectl` -kubeconfig=`realpath $K8S_CONFIG` -storage.testdriver=`realpath $E2E_TEST_CONFIG`
          /bin/bash /tmp/clean_up_mount_dir.sh $CONFIG_KIND $NODE_APP_LABEL $DATENLORD_NAMESPACE true
          # Run [Disruptive] test in serial and separately
          kubernetes/test/bin/ginkgo -v -failFast -failOnPending -debug -focus='External.Storage.*(\[Feature:|\[Disruptive\]|\[Serial\])' kubernetes/test/bin/e2e.test -- -v=5 -kubectl-path=`which kubectl` -kubeconfig=`realpath $K8S_CONFIG` -storage.testdriver=`realpath $E2E_TEST_CONFIG`
          /bin/bash /tmp/clean_up_mount_dir.sh $CONFIG_KIND $NODE_APP_LABEL $DATENLORD_NAMESPACE false
      - name: Quick Start Test
        run: |
          # kubectl delete -f $CONFIG_KIND
          sed -e 's/e2e_test/latest/g' $CONFIG_KIND > $CONFIG_DOCKERHUB
          kubectl apply -f $CONFIG_DOCKERHUB
          kubectl wait --for=condition=Ready pod -l app=$CONTROLLER_APP_LABEL -n $DATENLORD_NAMESPACE --timeout=120s
          kubectl wait --for=condition=Ready pod -l app=$NODE_APP_LABEL -n $DATENLORD_NAMESPACE --timeout=120s
      - name: DatenLord Perf Test
        run: |
          kind delete cluster
          kind create cluster --config ./kind-config.yaml
          kind load docker-image ${DATENLORD_IMAGE}
          sh scripts/datenlord_perf_test.sh
      - name: Archive Perf Result
        uses: actions/upload-artifact@v2
        with:
          name: perf-report
          path: /tmp/output/*

      - name: Print DatenLord logs
        if: ${{ failure() }}
        run: |
          echo “check disk usage”
          df -h

          kubectl get pods -A -o wide
          CONTROLLER_POD_NAME=`kubectl get pod -l app=$CONTROLLER_APP_LABEL -n $DATENLORD_NAMESPACE -o jsonpath="{.items[0].metadata.name}"`
          echo "SHOW LOGS OF $CONTROLLER_CONTAINER_NAME IN $CONTROLLER_POD_NAME"
          kubectl logs $CONTROLLER_POD_NAME -n $DATENLORD_NAMESPACE -c $CONTROLLER_CONTAINER_NAME
          NODE_POD_NAMES=`kubectl get pods --selector=app=${NODE_APP_LABEL} --namespace ${DATENLORD_NAMESPACE} --output=custom-columns="NAME:.metadata.name" | tail -n +2`
          for pod in ${NODE_POD_NAMES}; do
            echo "SHOW LOGS OF $NODE_CONTAINER_NAME IN ${pod}"
            kubectl logs ${pod} -n ${DATENLORD_NAMESPACE} -c ${NODE_CONTAINER_NAME}
          done
          kubectl describe pod metrics-datenlord-test
          kubectl cluster-info dump
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
