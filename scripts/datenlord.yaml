# The YAML script to deploy DatenLord CSI plugins to K8S
# Run the following cmd to generate YAML script for MicroK8s
# sed -e 's/\/var\/lib\/kubelet/\/var\/snap\/microk8s\/common\/var\/lib\/kubelet/g' csiplugin_k8s.yaml > microk8s.yaml

apiVersion: v1
kind: Namespace
metadata:
  name: csi-datenlord
  labels:
    name: csi-datenlord

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-nodeplugin-sa
  namespace: csi-datenlord

---
apiVersion: scheduling.k8s.io/v1beta1
kind: PriorityClass
metadata:
  name: csi-datenlord-critical
  namespace: csi-datenlord
value: 1000000000
globalDefault: false
description: "This priority class is used for csi pods."

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-nodeplugin-cr
  namespace: csi-datenlord
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "update"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-nodeplugin-crb
  namespace: csi-datenlord
subjects:
  - kind: ServiceAccount
    name: csi-nodeplugin-sa
    namespace: csi-datenlord
roleRef:
  kind: ClusterRole
  name: csi-nodeplugin-cr
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-controller-sa
  namespace: csi-datenlord

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-attacher-cr
  namespace: csi-datenlord
rules:
  - apiGroups: [""] # "" Indicates the core API group
    resources: ["pods"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments/status"]
    verbs: ["patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-attacher-crb
  namespace: csi-datenlord
subjects:
  - kind: ServiceAccount
    name: csi-controller-sa
    namespace: csi-datenlord
roleRef:
  kind: ClusterRole
  name: csi-attacher-cr
  apiGroup: rbac.authorization.k8s.io

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-controller-cr
  namespace: csi-datenlord
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "update", "create", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "update", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-controller-crb
  namespace: csi-datenlord
subjects:
  - kind: ServiceAccount
    name: csi-controller-sa
    namespace: csi-datenlord
roleRef:
  kind: ClusterRole
  name: csi-controller-cr
  apiGroup: rbac.authorization.k8s.io

---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-nodeplugin-datenlord
  namespace: csi-datenlord
spec:
  selector:
    matchLabels:
      app: csi-nodeplugin-datenlord
  template:
    metadata:
      labels:
        app: csi-nodeplugin-datenlord
    spec:
      hostNetwork: false # TODO: should use k8s network?
      serviceAccount: csi-nodeplugin-sa
      priorityClassName: csi-datenlord-critical
      containers:
        - name: datenlord-fuse
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
          image: datenlord/datenlord:e2e_test
          imagePullPolicy: "IfNotPresent"
          args:
            - "--mountpoint=$(FUSE_MOUNT_DIR)"
            - "--volume_info=$(FUSE_VOLUME_INFO)"
            - "--etcd=$(ETCD_ENDPOINT)"
          lifecycle:
            #postStart:
            #  exec:
            #    command: ["/bin/sh", "-c", "\"umount -f /var/opt/datenlord-data && echo un-mounted || echo not-mounted\""]
            preStop:
              exec:
                command: ["/bin/sh", "/usr/local/bin/umount-in-container.sh", "/var/opt/datenlord-data"]
          env:
            - name: FUSE_MOUNT_DIR
              value: /var/opt/datenlord-data
            - name: ETCD_ENDPOINT
              value: csi-etcd-svc:2379
            - name: FUSE_VOLUME_INFO
              value: https://mybucket
            - name: RUST_LOG
              value: debug
            - name: RUST_BACKTRACE
              value: full
            - name: pod_ip_address
              value: "127.0.0.1"
          volumeMounts:
            - name: datenlord-data-dir
              # This mount path must be the same inside and outside container
              # since DatenLord use bind mount to publish volume from here
              mountPath: /var/opt/datenlord-data
              mountPropagation: Bidirectional
            - name: fuse-device
              mountPath: /dev/fuse
              mountPropagation: Bidirectional
        - name: datenlord-node-plugin
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          image: datenlord/csiplugin:e2e_test
          imagePullPolicy: "IfNotPresent"
          args:
            - "--endpoint=$(CSI_NODE_ENDPOINT)"
            - "--drivername=csi.datenlord.io"
            - "--nodeid=$(NODE_ID)"
            - "--nodeip=$(NODE_IP)"
            - "--workerport=50051"
            - "--runas=node"
            - "--datadir=$(DATA_DIR)"
            - "--etcd=csi-etcd-svc:2379"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CSI_NODE_ENDPOINT
              value: unix:///plugin/node.sock
            - name: RUST_LOG
              value: csi=debug
            - name: RUST_BACKTRACE
              value: full
            - name: DATA_DIR
              value: /var/opt/datenlord-data
          ports:
            - containerPort: 50051
              hostPort: 50051
              name: workerport
            #- containerPort: 9898
            #  name: healthz
            #  protocol: TCP
          #livenessProbe:
          #  failureThreshold: 20
          #  httpGet:
          #    path: /healthz
          #    port: healthz
          #  initialDelaySeconds: 10
          #  timeoutSeconds: 3
          #  periodSeconds: 2
          volumeMounts:
            - name: socket-dir
              mountPath: /plugin
            - name: mountpoint-dir
              # This mount path must be the same inside and outside container
              # since DatenLord use bind mount to publish volume here
              mountPath: /var/lib/kubelet/pods
              mountPropagation: Bidirectional
            #- name: plugins-dir
            #  mountPath: /var/lib/kubelet/plugins
            #  mountPropagation: Bidirectional
            - name: datenlord-data-dir
              # This mount path must be the same inside and outside container
              mountPath: /var/opt/datenlord-data
              mountPropagation: Bidirectional
        - name: csi-node-driver-registrar
          securityContext:
            privileged: true
          image: quay.io/k8scsi/csi-node-driver-registrar:v1.3.0
          imagePullPolicy: "IfNotPresent"
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=/var/lib/kubelet/plugins/csi.datenlord.io/node.sock" # this path is outside container for K8S
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "\"rm -rf /registration/csi.datenlord.io /registration/csi.datenlord.io-reg.sock\""]
          env:
            - name: ADDRESS
              value: /plugin/node.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /plugin
            - name: registration-dir
              mountPath: /registration
        #- name: liveness-probe
        #  securityContext:
        #    privileged: true
        #  image: quay.io/k8scsi/livenessprobe:v2.0.0
        #  imagePullPolicy: "IfNotPresent"
        #  args:
        #    - "--v=5"
        #    - "--csi-address=$(ADDRESS)"
        #    - "--probe-timeout=60s"
        #    - "--health-port=9898"
        #  env:
        #    - name: ADDRESS
        #      value: /plugin/node.sock
        #  volumeMounts:
        #    - name: socket-dir
        #      mountPath: /plugin
      volumes:
        - name: socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/csi.datenlord.io
            type: DirectoryOrCreate
        - name: datenlord-data-dir
          hostPath:
            path: /var/opt/datenlord-data
            type: DirectoryOrCreate
        - name: fuse-device
          hostPath:
            path: /dev/fuse
            type: CharDevice
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
        - name: mountpoint-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        #- name: plugins-dir
        #  hostPath:
        #    path: /var/lib/kubelet/plugins
        #    type: Directory

---
apiVersion: v1
kind: Service
metadata:
  name: csi-etcd-svc
  namespace: csi-datenlord
spec:
  selector:
    app: csi-etcd
  ports:
    - protocol: TCP
      port: 2379
      targetPort: 2379

---
apiVersion: v1
kind: Service
metadata:
  name: csi-etcd
  namespace: csi-datenlord
spec:
  clusterIP: None
  ports:
    - port: 2379
      name: client
    - port: 2380
      name: peer
  selector:
    app: csi-etcd

---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-etcd
  namespace: csi-datenlord
spec:
  selector:
    matchLabels:
      app: csi-etcd
  serviceName: "csi-etcd"
  replicas: 3
  template:
    metadata:
      labels:
        app: csi-etcd
    spec:
      containers:
        - name: etcd
          image: gcr.io/etcd-development/etcd:v3.4.13
          imagePullPolicy: "IfNotPresent"
          ports:
          - containerPort: 2379
            name: client
          - containerPort: 2380
            name: peer
          command:
            - "/usr/local/bin/etcd"
          args:
            - "--name=$(NODE_ID)"
            - "--initial-advertise-peer-urls=http://$(NODE_ID).csi-etcd:2380"
            - "--listen-peer-urls=http://0.0.0.0:2380"
            - "--advertise-client-urls=http://$(NODE_ID).csi-etcd:2379"
            - "--listen-client-urls=http://0.0.0.0:2379"
            - "--initial-cluster=$(PEER)"
            - "--listen-metrics-urls=http://0.0.0.0:2381"
            - "--data-dir=/var/lib/etcd/default.etcd"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PEER
              value: "csi-etcd-0=http://csi-etcd-0.csi-etcd:2380,csi-etcd-1=http://csi-etcd-1.csi-etcd:2380,csi-etcd-2=http://csi-etcd-2.csi-etcd:2380"
          livenessProbe:
            httpGet:
              path: /health
              port: 2381
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
            - name: etcd-data-dir
              mountPath: /var/lib/etcd
      volumes:
        - name: etcd-data-dir
          hostPath:
            path: /var/lib/etcd
            type: DirectoryOrCreate
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-controller-datenlord
  namespace: csi-datenlord
spec:
  selector:
    matchLabels:
      app: csi-controller-datenlord # Must match .spec.template.metadata.labels  
  serviceName: "datenlord-controller-svc"
  replicas: 1
  template:
    metadata:
      labels:
        app: csi-controller-datenlord
    spec:
      hostNetwork: false # TODO: should use k8s network?
      serviceAccount: csi-controller-sa
      priorityClassName: csi-datenlord-critical
      containers:
        - name: datenlord-controller-plugin
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          image: datenlord/csiplugin:e2e_test
          imagePullPolicy: "IfNotPresent"
          args :
            - "--endpoint=$(CSI_CONTROLLER_ENDPOINT)"
            - "--drivername=csi.datenlord.io"
            - "--nodeid=$(NODE_ID)"
            - "--nodeip=$(NODE_IP)"
            - "--workerport=50051"
            - "--runas=controller"
            - "--datadir=$(DATA_DIR)"
            - "--etcd=csi-etcd-svc:2379"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CSI_CONTROLLER_ENDPOINT
              value: unix:///plugin/controller.sock
            - name: RUST_LOG
              value: csi=debug
            - name: RUST_BACKTRACE
              value: full
            - name: DATA_DIR
              value: /tmp/datenlord-data
          #ports:
          #  - containerPort: 50051
          #    hostPort: 50051
          #  - containerPort: 9898
          #    name: healthz
          #    protocol: TCP
          #livenessProbe:
          #  failureThreshold: 5
          #  httpGet:
          #    path: /healthz
          #    port: healthz
          #  initialDelaySeconds: 10
          #  timeoutSeconds: 3
          #  periodSeconds: 2
          volumeMounts:
            - name: socket-dir
              mountPath: /plugin
        - name: csi-attacher
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          image: quay.io/k8scsi/csi-attacher:v2.2.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /plugin/controller.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /plugin
        - name: csi-provisioner
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          image: quay.io/k8scsi/csi-provisioner:v1.6.0
          args:
            - "--csi-address=$(ADDRESS)"
            - "--volume-name-prefix=datenlord-pv"
            - "--feature-gates=Topology=true"
            - "--strict-topology"
            - "--v=5"
          env:
            - name: ADDRESS
              value: /plugin/controller.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /plugin
        - name: csi-snapshotter
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          image: quay.io/k8scsi/csi-snapshotter:v2.1.1
          imagePullPolicy: "IfNotPresent"
          args:
            - "--csi-address=$(ADDRESS)"
            - "--snapshot-name-prefix=datenlord-snapshot"
            - "--v=5"
          env:
            - name: ADDRESS
              value: /plugin/controller.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /plugin
        #- name: liveness-probe
        #  image: quay.io/k8scsi/livenessprobe:v2.0.0
        #  imagePullPolicy: "IfNotPresent"
        #  args:
        #    - "--v=5"
        #    - "--csi-address=$(ADDRESS)"
        #    - "--probe-timeout=60s"
        #    - "--health-port=9898"
        #  env:
        #    - name: ADDRESS
        #      value: /plugin/controller.sock
        #  volumeMounts:
        #    - name: socket-dir
        #      mountPath: /plugin
        - name: csi-resizer
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          image: quay.io/k8scsi/csi-resizer:v0.5.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /plugin/controller.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /plugin
      volumes:
        - name: socket-dir
          # emptyDir: {} # TODO: use emptyDir when release
          hostPath:
            path: /var/lib/kubelet/plugins/csi.datenlord.io
            type: DirectoryOrCreate
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: datenlord-scheduler
  namespace: csi-datenlord
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: datenlord-scheduler-cluster-admin
  namespace: csi-datenlord
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    namespace: csi-datenlord
    name: datenlord-scheduler
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: datenlord-scheduler-config
  namespace: csi-datenlord
data:
  config.yaml: |
    apiVersion: kubescheduler.config.k8s.io/v1beta1
    kind: KubeSchedulerConfiguration
    leaderElection:
      leaderElect: false
    clientConnection:
      acceptContentTypes: ""
      burst: 100
      contentType: application/vnd.kubernetes.protobuf
      kubeconfig: ""
      qps: 50
    healthzBindAddress: 0.0.0.0:10251
    metricsBindAddress: 0.0.0.0:10251
    profiles:
    - schedulerName: datenlord-scheduler
    extenders:
    - urlPrefix: "http://127.0.0.1:12345"
      filterVerb: "filter"
      prioritizeVerb: "prioritize"
      nodeCacheCapable: false
      ignorable: false
      weight: 1
      enableHTTPS: false
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datenlord-scheduler
  namespace: csi-datenlord
  labels:
    app: datenlord-scheduler
spec:
  selector:
    matchLabels:
      app: datenlord-scheduler
  replicas: 1
  template:
    metadata:
      labels:
        app: datenlord-scheduler
    spec:
      serviceAccountName: datenlord-scheduler
      volumes:
      - name: datenlord-scheduler-config
        configMap:
          name: datenlord-scheduler-config
      containers:
        - name: datenlord-scheduler
          image: k8s.gcr.io/kube-scheduler:v1.19.1
          imagePullPolicy: IfNotPresent
          args:
          - kube-scheduler
          - --config=/datenlord-scheduler/config.yaml
          - --address=0.0.0.0
          - --leader-elect=false
          - -v=4
          volumeMounts:
          - name: datenlord-scheduler-config
            mountPath: /datenlord-scheduler
        - name: datenlord-scheduler-extender
          image: datenlord/csiplugin:e2e_test
          imagePullPolicy: "IfNotPresent"
          args:
            - "--endpoint=$(CSI_CONTROLLER_ENDPOINT)"
            - "--nodeid=$(NODE_ID)"
            - "--nodeip=127.0.0.1"
            - "--workerport=12345"
            - "--runas=scheduler-extender"
            - "--etcd=csi-etcd-svc:2379"
            - "--scheduler-extender-port=12345"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CSI_CONTROLLER_ENDPOINT
              value: unix:///plugin/controller.sock
            - name: RUST_LOG
              value: csi=debug
            - name: RUST_BACKTRACE
              value: full
          ports:
            - containerPort: 12345
              hostPort: 12345
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - namespaces:
                - kube-system
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  component: kube-scheduler      
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: "Exists"
        effect: NoSchedule
---
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: csi.datenlord.io
spec:
  attachRequired: false # No controller publish/unpublish
  # To determine at runtime which mode a volume uses, pod info and its
  # "csi.storage.k8s.io/ephemeral" entry are needed.
  # Informaion includes pod name, uid and namespace.
  podInfoOnMount: true
  # Supports persistent and ephemeral inline volumes, added in Kubernetes 1.16, this field is beta
  volumeLifecycleModes:
  - Persistent
  - Ephemeral

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: csi-datenlord-sc
  namespace: csi-datenlord
provisioner: csi.datenlord.io
reclaimPolicy: Delete # Retain
volumeBindingMode: Immediate # WaitForFirstConsumer
allowVolumeExpansion: true

---
apiVersion: snapshot.storage.k8s.io/v1beta1
kind: VolumeSnapshotClass
metadata:
  name: csi-datenlord-snapclass
driver: csi.datenlord.io
deletionPolicy: Delete

